// 6

int f() {
  const a = A(5);
  const v = V<int>::null();
  const e = E::E1;
  return g();
}

A<int> a1() {
  return A(1);
}

int g() {
  if (false)
    return f();
  else
    return 1;
}

template <T>
struct A {
  T a;
  T m1() {
    const c = A(same(a));
    if (1 == 1)
      return c.a;
    else
      return m2();
  }
  T m2() {
    if (1 == 2)
      return same(m1());
    else
      return getA(a).a;
  }
  E m3() {
    return E::E2;
  }
};

template <T>
variant V {
  void null;
  T elem;
};

template<T>
T same(T a) {
  return a;
}

template<T>
A<T> getA(T t) {
  return A(t);
}

enum E {
  E1,
  E2
}

int main() {
  const a = A<int>(5);
  return f() + a.m1();
}
