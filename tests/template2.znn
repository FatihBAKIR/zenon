// 2

template<T>
concept can_copy {
  T(T*);
};

template <Param> requires can_copy<Param>
variant nullable {
  Param p;
  void null;
};

template <T> requires can_copy<T>
nullable<T> null() {
  return nullable<T>::null();
}

template <T> requires can_copy<T>
nullable<T> value(T t) {
  return nullable<T>::p(t);
}

template <U, V> requires can_copy<U>, can_copy<V>
variant V2 {
  nullable<U> e1;
  nullable<V> e2;
};

template <U, V> requires can_copy<U>, can_copy<V>
bool equal(V2<U,V> v, U u) {
  V2<U,V> vTmp = v;
  switch (vTmp) {
    case (e1) {
      switch (e1) {
        case (null) {
          return false;
        }
        case (p) {
          return true;
        }
      }
    }
    case (nullable<V> e2) {
      return false;
    }
  }
}

template<T> requires can_copy<T>
struct X {
  T elem;
};

int main() {
  auto z = X<int>(5);
  auto x = value(z);
  auto y = value(X<bool>(true));
  auto v2 = V2<X<int>,X<bool>>::e1(x);
  int a = 1;
  if (equal(v2, z))
    a = a + 1;
  return a;
}

