// no_compile

template<T, U>
concept CanConvert {
  U convert(T* t);
};

template <T>
struct S1 {
  T t;
  template <U> requires CanConvert<U, T>
  void set(U u) {
    t = u.convert();
  }
};

struct X {
  int a;
};

int convert(X* x) {
  return 1 + (*x).a;
}

int main() {
  auto s1 = S1(1);
  s1.set(5);
  return s1.t;
}
