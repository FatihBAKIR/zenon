// 55

embed {

#include <vector>
using namespace std;

}

template <T>
extern struct vector {
  vector();
  vector(int cnt, T);
};

template <T>
void push_back(vector<T> mutable* v, T elem) {
  embed {
    v->push_back(std::move(elem));
  }
}

template <T>
T* at(vector<T>* v, int index) {
  embed {
    return &v->at(index);
  }
}

template <T>
int size(vector<T>* v) {
  embed {
    return v->size();
  }
}

int f() {
  const v = vector<int>();
  return v.size();
}

int main() {
  mutable v = vector<int>();
  for (mutable i = 0; i < 6; i = i + 1)
    v.push_back(i * i);
  mutable sum = 0;
  for (mutable i = 0; i < v.size(); i = i + 1)
    sum = sum + *v.at(i);
  return sum + f();
}

