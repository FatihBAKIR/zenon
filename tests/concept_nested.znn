// 2

template <T>
concept CanAdd {
  T operator + (T t1, T t2);
};

template <T>
concept CanAdd2 {
  T operator + (T t1, T t2);
};

template <A> requires CanAdd2<A>
void times2(A* a) {
  *a = *a + *a;
}

template <A> requires CanAdd<A>
struct S {
  A a;
};

template <A> requires CanAdd<A>
void t2(S<A>* s) {
  times2(&(*s).a);
}

int main() {
  S<int> s = S<int>(1);
  s.t2();
  return s.a;
}
