// 4

import "std/concepts.znn";

template <T>
variant V {
  T value;
  void null;
};

template<U, T> requires can_copy<T>
T getValueOr(V<T>* v, U u, mutable T a) {
  switch (*v) {
    case (T* value) {
      return value->copy();
    }
    case (null) {
      return move(a);
    }
  }
}

int main() {
  mutable v = V<int>::value(5);
  v = V<int>::null();
  return v.getValueOr<bool>(true, 4);
}
