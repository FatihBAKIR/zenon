// 4

template<T>
concept can_copy {
  T(T*);
};

template <T> requires can_copy<T>
variant V {
  T value;
  void null;
};

template <T> requires can_copy<T>
T getValueOr(V<T>* v, mutable T a) {
  switch (*v) {
    case (T value) {
      return value;
    }
    case (null) {
      return move(a);
    }
  }
}

int main() {
  mutable v = V<int>::value(5);
  v = V<int>::null();
  return v.getValueOr(4);
}
