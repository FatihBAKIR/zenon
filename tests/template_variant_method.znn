// 4

template<T>
concept can_copy {
  T(T&);
};

template <T> requires can_copy<T>
variant V {
  T value;
  void null;
  T getValueOr(T a) {
    switch (*this) {
      case (T value) {
        return value;
      }
      case (null) {
        return a;
      }
    }
  }
};

int main() {
  mutable v = V<int>::value(5);
  v = V<int>::null();
  return v.getValueOr(4);
}
