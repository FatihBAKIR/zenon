// 5


template<T> 
concept can_copy {
  T(T*);
};

template<T> requires can_copy<T>
void copy(T mutable* out, T in) {
  *out = in;
}

template<T> requires can_copy<T>
variant V {
  T elem;
  void null;
};

template<T> requires can_copy<T>
T get(V<T> v, T def) {
  switch (v) {
    case (T elem) {
      return elem;
    }
    default {
      return def;
    }
  }
}

int main() {
  V<int> v1 = V<int>::elem(7);
  V<int> v2 = V<int>::null();
  mutable x = get(v1, 10) - get({v = v2, def = 5});
  copy(&x, x + 3);
  return x;
}
